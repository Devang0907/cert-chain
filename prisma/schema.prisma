generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  INSTITUTION
  EMPLOYER
}

enum CertificateType {
  DEGREE
  DIPLOMA
  CERTIFICATE
  COURSE
  AWARD
}

model User {
  id            String        @id @default(uuid())
  walletAddress String        @unique
  email         String?       @unique
  name          String?
  role          UserRole
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  institutionId String?
  
  // Relations
  issuedCertificates     Certificate[] @relation("Issuer")
  receivedCertificates   Certificate[] @relation("Recipient")
  institution           Institution?   @relation("InstitutionAdmin", fields: [institutionId], references: [id])
  notifications         Notification[]
  shares               Share[]
  settings             Settings?

  @@index([institutionId])
}

model Institution {
  id          String        @id @default(uuid())
  name        String
  website     String?
  verified    Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  administrators User[]         @relation("InstitutionAdmin")
  certificates   Certificate[]
}

model Certificate {
  id          String          @id @default(uuid())
  title       String
  type        CertificateType
  mintAddress String          @unique
  metadata    Json?
  issueDate   DateTime        @default(now())
  expiryDate  DateTime?
  revoked     Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  recipient     User         @relation("Recipient", fields: [recipientId], references: [id])
  recipientId   String
  issuer        User         @relation("Issuer", fields: [issuerId], references: [id])
  issuerId      String
  institution   Institution  @relation(fields: [institutionId], references: [id])
  institutionId String
  shares        Share[]

  @@index([recipientId])
  @@index([issuerId])
  @@index([institutionId])
}

model Share {
  id            String      @id @default(uuid())
  userId        String
  certificateId String
  token         String      @unique
  email         String?
  expiryDate    DateTime?
  includePrivate Boolean    @default(false)
  createdAt     DateTime    @default(now())
  accessedAt    DateTime?

  // Relations
  user        User        @relation(fields: [userId], references: [id])
  certificate Certificate @relation(fields: [certificateId], references: [id])

  @@index([userId])
  @@index([certificateId])
  @@index([token])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String
  data      Json
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Settings {
  id                    String   @id @default(uuid())
  userId               String   @unique
  emailNotifications   Boolean  @default(true)
  browserNotifications Boolean  @default(true)
  twoFactorEnabled     Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])
}

model Analytics {
  id        String   @id @default(uuid())
  eventName String
  eventData Json
  timestamp DateTime @default(now())

  @@index([eventName])
  @@index([timestamp])
}